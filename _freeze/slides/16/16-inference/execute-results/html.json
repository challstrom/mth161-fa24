{
  "hash": "9011ede46be88ec4dc8e36de8b768a91",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Normal Distrubtion (continued)\nsubtitle: Chapter 13\nauthor: \"\"\nformat: revealjs\nauto-stretch: false\n---\n\n\n\n\n## from Tuesday...\n\n\\\n\n### Central Limit Theorem\n\n\n\n\n::: {.cell}\n<style type=\"text/css\">\n.red {\n  color: #B8001F;\n}\n</style>\n:::\n\n\n\n\nThe distribution of the sample statistic is [normal]{.red} if certain conditions are met.\n\n::: task\n1.  What do we mean by the distribution of the sample statistic?\n2.  What conditions need to be met?\n:::\n\n## Sample distribution\n\n> Example: In a sample of 224 ring-tailed lemurs, the average weight was 924 grams.\n\n-   We expect the *sample statistic* to approximate the *population parameter*\n\n-   But if you looked at a *different sample* you would not expect to get the same number!\n\n## Sample distribution\n\n-   take *another* sample of size $n$ (original sample size) from the population\n-   calculate and record the sample statistic for this new sample\n-   repeat this hundreds (thousands?) of times\n-   not at all practical!\n\n## Instead...\n\n-   Either use simulation (randomization, bootstrapping, etc!)\n\n-   Or use mathematical theory to know what to expect if we *had* taken repeated samples (central limit theorem)\n\n## Conditions required by CLT\n\n1.  [Independent observations]{.red}\n\n-   Guaranteed when we take a random sample.\n\n2.  [Large enough sample]{.red}\n\n-   What qualifies as \"large enough\" differs by context (i.e., from sample statistic to sample statistic).\n\n-   E.g. for proportions, need at least 10 expected successes and 10 expected failures.\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## Use the normal distribution...\n\n\\\n\n### To make decisions -- [hypothesis testing]{.red}\n\n-   determine the probability of the observed sample statistic (or something more extreme, in the direction of the alternative hypothesis), i.e. the [p-value]{.red}\n\n## Use the normal distribution...\n\n\\\n\n### To make estimations -- [confidence intervals]{.red}\n\n-   calculate the bounds of the confidence interval, adding and subtracting a [margin of error]{.red} to the observed sample statistic\n\n## Empirical Rule\n\nThe normal distribution is not just *any* unimodal and symmetric distribution, it follows the **68-95-99.7 rule**.\n\n![](images/er6895997.png){fig-align=\"center\"}\n\n------------------------------------------------------------------------\n\n> The mean height of female identifying adults in the U.S. is 64.5'' with a standard deviation of 2.5''.\n\n> Based on the empirical rule, about 95% of the adult female population is in what range of heights?\n\n## Standard Error\n\n-   The [center]{.red} of the sampling distribution will be at the true population parameter.\n\n-   The **spread** of the sampling distribution is measured by the [standard error]{.red} (like the spread of a single sample is measured by the standard deviation)\n\n## Standard Error Formulas\n\nEach sample statistic has own formula for standard error\n\n-   $\\bar{x}$ -- sample mean\n-   $\\hat{p}$ -- sample proportion\n-   $\\bar{x}_1 - \\bar{x}_2$ -- difference of sample means\n-   $\\hat{p}_1 - \\hat{p}_2$ -- difference of sample proportions\n\nWe'll see these in later chapters...\n\n## Margin of Error\n\n-   Measures how far away observations are from population parameter.\n-   Closely related to standard error: e.g. 95% of observations are within 2 SE of the mean.\n\n------------------------------------------------------------------------\n\n![](images/wapo_graph_Oct23.png){fig-align=\"center\"}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}