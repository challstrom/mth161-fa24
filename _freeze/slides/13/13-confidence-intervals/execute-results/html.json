{
  "hash": "7bb7d1a90e09bb2442859d28e50af4de",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Confidence Intervals with Bootstrapping\nsubtitle: Chapter 12\nformat: revealjs\nauto-stretch: false\nauthor: \"\"\necho: false\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## In groups\n\n-   Discuss Homework: Chapter 12, #1, 3, 7\n\n## Confidence Intervals\n\n\\\n\n### Goal is to estimate a population parameter\n\n$p$ -- true value of a parameter (usually unknown)\n\n$\\hat {p}$ -- sample statistic\n\n\\\n\nHow **confident** can we be that the value of $\\hat {p}$ is close to $p$?\n\n## Case Study\n\nA medical consultant helps guide transplant patients through all the stages of surgery. Out of a total of 62 clients, only 3 had complications:\n\n$$\n\\hat{p} = 3/62 = 0.048\n$$\n\nConsultant claims that her rate is less than the national rate of 10%.\n\nQuestion -- how confident can we be that $p$ is less than the national rate of 0.1?\n\n## Distributions\n\nWe know that there's some **variation** in the data. But how much?\n\nIf this particular consultant had *another* 62 clients, how many of them might have complications?\n\n\\\n\nThis is similar to what we did last week.\n\nWe need to know the **sampling distribution**.\n\n## Two Steps\n\n1.  Find the distribution\n\n2.  Use the distribution to find confidence interval\n\n## Step 1 -- Find Sampling Distribution\n\n-   Determine with math!\\\n    We'll come back to this in Chapter 13.\n\n-   **Bootstrapping**!\\\n    Use the observed proportion to construct a new population and **resample** from that.\n\n-   Someone else gives this to us. (e.g. see Chapter 12 homework)\n\n## Bootstrap\n\nWant 62 new outcomes each with a 0.048 chance of having a complication. Put 62 marbles in a bag\n\n-   3 labeled \"C\"\n-   59 labeld \"NC\"\n\n1.  pick a marble\n2.  note outcome\n3.  put back into bag (sample with replacement)\n4.  repeat\n\n## Resample #1\n\n\"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"C\", \"NC\", \"C\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"C\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"NC\", \"C\", \"NC\", \"NC\", \"NC\", \"C\", \"NC\", \"NC\"\n\n\\\n\nComplications: 5/62 = 0.081\n\n## Resample many times to get sample distribution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(25) \n\nboot_dist_donor <- organ_donor |>\n  specify(response = outcome, success = \"complication\") |>\n  generate(reps = 1000, type = \"bootstrap\") |>\n  calculate(stat = \"prop\")\n```\n:::\n\n\n## Visualize\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboot_dist_donor |>\n  ggplot( aes(x = stat)) +\n  geom_histogram(binwidth = 0.011, col=\"white\")\n```\n\n::: {.cell-output-display}\n![](13-confidence-intervals_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n## Visualize\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisualize(boot_dist_donor)\n```\n\n::: {.cell-output-display}\n![](13-confidence-intervals_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n## Step 2 -- Use Sampling Distribution to get confidence interval\n\nEstimate 95% confidence interval from graph\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](13-confidence-intervals_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n\n## 95% confidence interval\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](13-confidence-intervals_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n## Confidence Interval #2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboot_dist_donor |>\n  summarize(\n    lower = quantile( stat, 0.025),\n    upper = quantile( stat, 0.975)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  lower upper\n  <dbl> <dbl>\n1     0 0.113\n```\n\n\n:::\n:::\n\n\n## Confidence Interval #3\n\n\n::: {.cell}\n\n```{.r .cell-code}\nci <- boot_dist_donor |>\n  get_confidence_interval(level = 0.95)\n\nci\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  lower_ci upper_ci\n     <dbl>    <dbl>\n1        0    0.113\n```\n\n\n:::\n:::\n\n\n## visualize\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisualize(boot_dist_donor) +\n  shade_confidence_interval(ci)\n```\n\n::: {.cell-output-display}\n![](13-confidence-intervals_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\n## Interpretation\n\nWe are 95% confident that the true proportion is between 0.0 and 0.113.\n\nNotice that this interval contains the national rate of 0.1.\n\nTherefore we cannot be confident (at a 95% level) that true proportion is less than 10%!\n",
    "supporting": [
      "13-confidence-intervals_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}