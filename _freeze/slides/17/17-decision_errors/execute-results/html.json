{
  "hash": "2736f7631a2f8250fd027c16305bef1e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Decision Errors\nsubtitle: Chapter 14\nauthor: \"\"\nformat: revealjs\nauto-stretch: false\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n\n## Hypothesis Testing Framework\n\n\n\n::: {.cell}\n<style type=\"text/css\">\n.red {\n  color: #B8001F;\n}\n</style>\n:::\n\n\n\n1.  State the [null hypothesis]{.red} and the [alternative\n    hypothesis]{.red}\n\n::: fragment\n2.  Choose a [sample]{.red}, collect and analyze the data\n:::\n\n::: fragment\n3.  How [likely]{.red} is it to see data like what we observed, [if the\n    null hypothesis were true]{.red}?\n:::\n\n::: fragment\n4.  If very unlikely, we [reject]{.red} the null hypothesis. Otherwise,\n    we [cannot reject]{.red} the null claim.\n:::\n\n## Making a decision\n\nIf the conditional probability of obtaining our test statistic, [or more\nextreme]{.red}, is very small: $$\np < \\alpha\n$$ We have evidence to [reject]{.red} the null hypothesis.\n\nThis probability is the [p-value]{.red} and the [discernment level\n($\\alpha$)]{.red} (or significance level) is our threshold for \"very\nsmall\".\n\n## Making a decision\n\nOn the other hand, if the p-value is greater (or equal to) $\\alpha$, we\nsay the results are not statistically significant and we [fail to\nreject]{.red}.\n\n\\\n\nNote: we [don't]{.red} say $H_0$ is true -- just that we don't have\nevidence to say it's not!\n\n## Choosing a discernability level\n\nThis should always be done [before]{.red} seeing the data!\n\n\\\nWhat are the consequences of making an incorrect decision?\n\n## Type I Error\n\n### Suppose that the null hypothesis is actually [true]{.red}\n\n\\\n\n-   we might correcly fail to reject (good decision)\n\n-   we might [incorrectly]{.red} reject the null hypothesis\n\n## Type II Error\n\n### Suppose that the null hypothesis is actually [not true]{.red}\n\n\\\n\n-   we might correcly reject (good decision)\n\n-   we might [incorrectly]{.red} fail to reject the null hypothesis\n\n## Decision Errors\n\n\\\n\nSuppose the null hypothesis is $H_0$\n\n-   [Type I Error]{.red}: rejecting $H_0$ when it is actually true\n-   [Type II Error]{.red}: not rejecting $H_0$ when it is actually false\n\nHow likely these errors are depends on [discernment level]{.red}.\n\nWhat are the consequences for making each type of error?\n\nChoose [$\\alpha$]{.red} accordingly!\n\n## Example\n\n::: small\n> A researcher believes that the mean number of pesticides is higher in\n> the Willamette river than compared to a 1996 report that cited 36\n> different pesticides. The researcher collects samples from the river\n> over a yearâ€™s time and found a significant increase in the mean number\n> of pesticides.\n:::\n\n::: incremental\n-   State the null and alternative hypotheses.\n-   What has happened if a type I error occurs -- what are the potential\n    consequences?\n-   What has happened if a type II error occurs -- what are the\n    potential consequences?\n:::\n\n## Controlling for Errors\n\n-   To avoid Type I errors, make it [harder]{.red} to reject $H_0$ -- make\n    discernment level [smaller]{.red}\n\n-   To avoid Type II errors, make it [easier]{.red} to reject $H_0$ --\n    make discernment level [bigger]{.red}\n\n## For Thursday...\n\n-  Read about one-sided and two-side tests\n\n\\\n\n-  Homework:  Section 14.6, #2, 10 -- plus any problems from today that weren't completed (or still have questions about)\n\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}